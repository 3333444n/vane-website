---
import BaseLayout from "../layouts/BaseLayout.astro";
import Lectora from "../components/Lectora.astro";
import FilterMenu from "../components/FilterMenu.astro";

const rawCsvData = await import("../data/lectoras_certificadas.csv?raw");

interface LectoraData {
  id: string;
  nombre: string;
  ciudad: string;
  pais: string;
  certificaciones: string[];
  correo: string;
  telefono: string;
}

function parseCSV(csvText: string): LectoraData[] {
  const lines = csvText.trim().split("\n");
  const headers = lines[0].split(",");
  return lines.slice(1).map((line: string) => {
    const values = line.split(",");
    const entry: Partial<LectoraData> = {};
    headers.forEach((header: string, index: number) => {
      if (header === "certificaciones") {
        entry.certificaciones = values[index] ? values[index].split("|") : [];
      } else {
        entry[header as keyof Omit<LectoraData, "certificaciones">] =
          values[index];
      }
    });
    return entry as LectoraData;
  });
}

const lectorasData: LectoraData[] = parseCSV(rawCsvData.default);
const pageTitle = "Lectoras Certificadas";
---

<BaseLayout title={pageTitle}>
  <div class="container mx-auto p-4 sm:p-6 lg:p-8">
    <h1
      class="text-3xl md:text-4xl font-bold text-brand-0 mb-6 md:mb-10 text-center"
    >
      {pageTitle}
    </h1>

    <div class="flex flex-col md:flex-row md:space-x-6 lg:space-x-8">
      <!-- Mobile Filter Trigger & Desktop Filter Column -->
      <div class="w-full md:w-1/3 lg:w-1/4 xl:w-1/5 mb-6 md:mb-0">
        <button
          id="mobile-filter-btn"
          class="md:hidden w-full flex items-center justify-center p-3 bg-brand-0 text-white rounded-lg shadow-md hover:bg-brand-25 transition-colors mb-4 font-medium"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="h-5 w-5 mr-2"
            viewBox="0 0 20 20"
            fill="currentColor"
          >
            <path
              fill-rule="evenodd"
              d="M3 3a1 1 0 011-1h12a1 1 0 011 1v3a1 1 0 01-.293.707L13 10.414V15a1 1 0 01-.293.707l-2 2A1 1 0 019 17v-1.586l-3.707-3.707A1 1 0 015 11V3zm1_selector_cut_remove_this_line_1_selector_cut_remove_this_line_0_selector_cut_remove_this_line_1h10V4H4v2zm0 3.586L7.293 10 4 6.707V6.586zM11 15.414L12 14.414V10.414L15.293 7H16V4h-2v3.586L11 10.414v5z"
              clip-rule="evenodd"></path>
          </svg>
          Filtrar Lectoras
        </button>

        <div
          id="filter-menu-slideout-container"
          class="fixed inset-y-0 left-0 w-4/5 max-w-xs bg-white z-50 shadow-xl p-0 transform -translate-x-full transition-transform duration-300 ease-in-out md:relative md:translate-x-0 md:w-full md:max-w-none md:shadow-none md:p-0 md:bg-transparent"
        >
          <div
            class="flex justify-between items-center p-4 md:hidden border-b border-gray-200"
          >
            <h2 class="text-lg font-semibold text-brand-0">Filtros</h2>
            <button
              id="close-filter-menu-btn"
              class="text-gray-600 hover:text-gray-800"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="h-6 w-6"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
                ><path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M6 18L18 6M6 6l12 12"></path></svg
              >
            </button>
          </div>
          <div id="filter-menu-component-wrapper">
            <FilterMenu lectorasData={lectorasData} />
          </div>
        </div>
        <div
          id="filter-menu-overlay"
          class="fixed inset-0 bg-black bg-opacity-75 z-40 hidden md:hidden transition-opacity duration-300 ease-in-out"
        >
        </div>
      </div>

      <!-- Main Content: Search, Lectoras Grid, Pagination -->
      <div class="w-full md:w-2/3 lg:w-3/4 xl:w-4/5">
        <div class="mb-6">
          <input
            type="search"
            id="search-input"
            placeholder="Busca por nombre, ciudad, país, certificación..."
            class="w-full p-3 border border-gray-300 rounded-lg shadow-sm focus:ring-2 focus:ring-brand-50 focus:border-brand-50 transition-colors"
          />
        </div>

        <div
          id="lectoras-grid"
          class="grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-3 gap-6"
        >
          {
            lectorasData.map((lectora) => (
              <div class="lectora-wrapper" data-id={lectora.id}>
                <Lectora {...lectora} />
              </div>
            ))
          }
        </div>

        <div
          id="no-results-placeholder"
          class="text-center py-12 text-gray-500"
          style="display: none;"
        >
          <svg
            class="mx-auto h-12 w-12 text-gray-400"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
            aria-hidden="true"
          >
            <path
              vector-effect="non-scaling-stroke"
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M9 13h6m-3-3v6m-9 1V7a2 2 0 012-2h6l2 2h6a2 2 0 012 2v8a2 2 0 01-2 2H5a2 2 0 01-2-2zm3-9V3a1 1 0 00-1-1H5a1 1 0 00-1 1v2"
            ></path>
          </svg>
          <h3 class="mt-2 text-lg font-medium text-gray-900">Sin resultados</h3>
          <p class="mt-1 text-sm text-gray-500">
            La búsqueda no arrojó resultados. Cada lectora tiene un camino
            único, ¡intenta ajustar los filtros para encontrar la conexión que
            buscas!
          </p>
        </div>

        <div
          id="pagination-controls"
          class="mt-10 flex justify-center items-center space-x-2"
        >
          {/* Pagination buttons will be rendered here by JS */}
        </div>
      </div>
    </div>
  </div>
</BaseLayout>

<style>
  /* Additional styles for mobile filter menu if needed, e.g., body scroll lock when open */
  body.filter-menu-open {
    overflow: hidden;
  }
  @media (min-width: 768px) {
    /* md breakpoint */
    body.filter-menu-open {
      overflow: auto; /* Re-enable scroll on desktop if filter menu is part of layout */
    }
  }
</style>

<script define:vars={{ serverLectorasData: lectorasData }}>
  const allLectoras = serverLectorasData;
  let filteredLectoras = [...allLectoras];
  let currentPage = 1;
  const itemsPerPage = 12;

  const searchInput = document.getElementById("search-input");
  const lectorasGrid = document.getElementById("lectoras-grid");
  const paginationControls = document.getElementById("pagination-controls");
  const noResultsMessage = document.getElementById("no-results-placeholder");

  const filterMenuWrapper = document.getElementById(
    "filter-menu-component-wrapper"
  );
  const mobileFilterBtn = document.getElementById("mobile-filter-btn");
  const closeFilterMenuBtn = document.getElementById("close-filter-menu-btn");
  const filterMenuSlideout = document.getElementById(
    "filter-menu-slideout-container"
  );
  const filterMenuOverlay = document.getElementById("filter-menu-overlay");

  let currentSearchTerm = "";
  let currentAppliedFilters = {
    selectedPaises: [],
    selectedCiudades: [],
    selectedCertificaciones: [],
  };

  function applyFiltersAndSearch() {
    let result = [...allLectoras];

    // 1. Filter by searchTerm
    if (currentSearchTerm) {
      const lowerSearchTerm = currentSearchTerm.toLowerCase();
      result = result.filter((lectora) => {
        const searchableText =
          `${lectora.nombre} ${lectora.ciudad} ${lectora.pais} ${lectora.certificaciones.join(" ")}`.toLowerCase();
        return searchableText.includes(lowerSearchTerm);
      });
    }

    // 2. Filter by currentAppliedFilters
    // Pais filter
    if (currentAppliedFilters.selectedPaises.length > 0) {
      result = result.filter((lectora) =>
        currentAppliedFilters.selectedPaises.includes(lectora.pais)
      );
    }
    // Ciudad filter
    if (currentAppliedFilters.selectedCiudades.length > 0) {
      result = result.filter((lectora) =>
        currentAppliedFilters.selectedCiudades.includes(lectora.ciudad)
      );
      // Ensure city's country is also selected if countries are filtered
      if (currentAppliedFilters.selectedPaises.length > 0) {
        result = result.filter((lectora) =>
          currentAppliedFilters.selectedPaises.includes(lectora.pais)
        );
      }
    }
    // Certificaciones filter
    if (currentAppliedFilters.selectedCertificaciones.length > 0) {
      result = result.filter((lectora) =>
        lectora.certificaciones.some((cert) =>
          currentAppliedFilters.selectedCertificaciones.includes(cert)
        )
      );
    }

    filteredLectoras = result;
    currentPage = 1;
    renderLectoras();
  }

  function renderLectoras() {
    if (!lectorasGrid || !noResultsMessage) return;

    const startIndex = (currentPage - 1) * itemsPerPage;
    const endIndex = startIndex + itemsPerPage;
    const paginatedIds = filteredLectoras
      .slice(startIndex, endIndex)
      .map((l) => l.id);

    const allCardWrappers = lectorasGrid.querySelectorAll(".lectora-wrapper");
    let visibleCount = 0;
    allCardWrappers.forEach((wrapper) => {
      const cardId = wrapper.dataset.id;
      if (paginatedIds.includes(cardId)) {
        wrapper.style.display = "";
        visibleCount++;
      } else {
        wrapper.style.display = "none";
      }
    });

    if (visibleCount === 0 && filteredLectoras.length === 0) {
      // Check if any filters resulted in zero matches
      noResultsMessage.style.display = "block";
      lectorasGrid.style.display = "none"; // Hide grid if no results at all
    } else if (visibleCount === 0 && filteredLectoras.length > 0) {
      // No results on THIS page, but there are results in other pages
      noResultsMessage.style.display = "none"; // No general no-results message
      lectorasGrid.innerHTML =
        '<p class="text-center col-span-full text-gray-500 py-8">No hay más lectoras en esta página.</p>'; // Specific message for empty page
      lectorasGrid.style.display = "grid"; // Ensure grid is visible for this message
    } else {
      noResultsMessage.style.display = "none";
      lectorasGrid.style.display = "grid"; // Ensure grid is visible if there are cards
      // If lectorasGrid.innerHTML was changed for "No hay más lectoras", it needs to be repopulated or this logic needs to be smarter.
      // The show/hide wrappers approach avoids changing innerHTML of the grid itself.
      // Let's refine: if visibleCount is 0 but filteredLectoras.length > 0, it implies an empty page of results.
      // The `noResultsMessage` is for a global "no results for your query".
      // An empty page due to pagination does not mean "no results" globally.
    }

    // Refined no-results logic:
    if (filteredLectoras.length === 0) {
      noResultsMessage.style.display = "block";
      lectorasGrid.style.display = "none";
    } else {
      noResultsMessage.style.display = "none";
      lectorasGrid.style.display = "grid";
      // If paginatedIds is empty (current page has no items, but other pages might)
      if (paginatedIds.length === 0) {
        // Optionally show a message like "No items on this page" in the grid area or near pagination
        // For now, an empty grid on a page is acceptable if pagination implies other pages exist.
      }
    }

    renderPagination();
  }

  function renderPagination() {
    if (!paginationControls) return;
    paginationControls.innerHTML = ""; // Clear old controls

    const totalPages = Math.ceil(filteredLectoras.length / itemsPerPage);

    if (totalPages <= 1) {
      return; // No pagination needed for 1 or 0 pages
    }

    // Previous Button
    const prevButton = document.createElement("button");
    prevButton.textContent = "Anterior";
    prevButton.disabled = currentPage === 1;
    prevButton.className = `px-4 py-2 border border-gray-300 rounded-md text-sm font-medium hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed transition-colors`;
    prevButton.addEventListener("click", () => {
      if (currentPage > 1) {
        currentPage--;
        renderLectoras();
      }
    });
    paginationControls.appendChild(prevButton);

    // Page Info Text: "Página X de Y"
    const pageInfo = document.createElement("span");
    pageInfo.textContent = `Página ${currentPage} de ${totalPages}`;
    pageInfo.className = "px-4 py-2 text-sm text-gray-700";
    paginationControls.appendChild(pageInfo);

    // Next Button
    const nextButton = document.createElement("button");
    nextButton.textContent = "Siguiente";
    nextButton.disabled = currentPage === totalPages;
    nextButton.className = `px-4 py-2 border border-gray-300 rounded-md text-sm font-medium hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed transition-colors`;
    nextButton.addEventListener("click", () => {
      if (currentPage < totalPages) {
        currentPage++;
        renderLectoras();
      }
    });
    paginationControls.appendChild(nextButton);
  }

  // Event Listeners
  if (searchInput) {
    searchInput.addEventListener("input", (e) => {
      const target = e.target;
      if (target instanceof HTMLInputElement) {
        currentSearchTerm = target.value;
        applyFiltersAndSearch();
      }
    });
  }

  if (filterMenuWrapper) {
    filterMenuWrapper.addEventListener("filtersChanged", (e) => {
      if (e instanceof CustomEvent) {
        currentAppliedFilters = e.detail;
        applyFiltersAndSearch();
      }
    });
  }

  function openFilterMenu() {
    if (filterMenuSlideout && filterMenuOverlay) {
      filterMenuSlideout.classList.remove("-translate-x-full");
      filterMenuSlideout.classList.add("translate-x-0");
      filterMenuOverlay.classList.remove("hidden");
      document.body.classList.add("filter-menu-open");
    }
  }

  function closeFilterMenu() {
    if (filterMenuSlideout && filterMenuOverlay) {
      filterMenuSlideout.classList.add("-translate-x-full");
      filterMenuSlideout.classList.remove("translate-x-0");
      filterMenuOverlay.classList.add("hidden");
      document.body.classList.remove("filter-menu-open");
    }
  }

  if (mobileFilterBtn) {
    mobileFilterBtn.addEventListener("click", openFilterMenu);
  }
  if (closeFilterMenuBtn) {
    closeFilterMenuBtn.addEventListener("click", closeFilterMenu);
  }
  if (filterMenuOverlay) {
    filterMenuOverlay.addEventListener("click", closeFilterMenu);
  }

  // Initial Render
  document.addEventListener("astro:page-load", () => {
    // Ensure elements are present before initial render.
    // SearchInput, LectorasGrid, etc., should be queryable here.
    // Re-query in case of client-side navigation.
    // The initial querySelectorAll for lectorasGrid.querySelectorAll might be better inside renderLectoras too.
    if (document.getElementById("lectoras-grid")) {
      // Check if page content is loaded
      applyFiltersAndSearch();
    }
  });
  // Fallback for initial load if astro:page-load doesn't fire immediately or for non-SPA navigation
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", () =>
      applyFiltersAndSearch()
    );
  } else {
    // DOMContentLoaded has already fired or not applicable (e.g. astro island)
    // For Astro, astro:page-load is generally preferred.
    // If astro:page-load has already passed, we might need to call it once.
    // A simple direct call might be okay if this script runs after DOM is ready.
    if (document.getElementById("lectoras-grid")) {
      applyFiltersAndSearch();
    }
  }
</script>
