---
// import { type ImageMetadata } from 'astro'; // Commented out as ImageMetadata is not strictly used with current <img> tags
// For now, assuming imageSrc are direct URL paths

export interface Item {
  imageSrc: string; // Path to image or external URL. For Astro's <Image>, these would typically be imported assets.
  content: string; // HTML content for the text section
  title: string; // Title for the text section
}

export interface Props {
  items: Item[];
  id?: string; // Optional ID for the root element of the component
}

const { items, id }: Props = Astro.props;
---

<div id={id || undefined} class="relative vr-image-text-scroll">
  <!-- Mobile Layout: Stacked (hidden on large screens and up) -->
  <div class="lg:hidden">
    {
      items.map((item: Item, index: number) => (
        <div class="mb-12 p-4">
          <div class="w-full mb-4">
            <img
              src={item.imageSrc}
              alt={item.title || `Image ${index + 1}`}
              width={1080}
              height={1080}
              loading="lazy"
              class="rounded-sm w-full h-auto object-cover aspect-square"
            />
          </div>
          <div class="images-scrolling__content">
            <span class="images-scrolling__counter font-bold text-dark block mb-2 text-sm">
              {String(index + 1).padStart(2, "0")}
            </span>
            <div class="prose prose-sm max-w-none text-dark font-afacad">
              <h2
                class="h1 font-dmSerifText text-dark !mb-3 !text-3xl"
                set:html={item.title}
              />
              <div class="text-extra" set:html={item.content} />
            </div>
          </div>
        </div>
      ))
    }
  </div>

  <!-- Desktop Layout: Two Columns with Sticky Image (hidden on small screens) -->
  <div class="hidden lg:block">
    <!-- Main container for the sticky scroll effect -->
    <div class="desktop-sticky-wrapper">
      <div class="flex gap-12 px-8 py-12 md:py-20">
        <!-- Left Column: Text Content (Scrolls naturally with page) -->
        <div class="text-column flex-1 space-y-24">
          {
            items.map((item: Item, index: number) => (
              <div
                class="text-item intersect-once opacity-100 lg:opacity-0 transition-all duration-700 ease-out transform translate-y-0 lg:translate-y-6 intersect:opacity-100 intersect:translate-y-0 py-10 min-h-[100vh] flex flex-col justify-center"
                data-index={index}
              >
                <div class="images-scrolling__content">
                  <span class="images-scrolling__counter font-bold text-dark block mb-2 text-lg">
                    {String(index + 1).padStart(2, "0")}
                  </span>
                  <div class="prose lg:prose-lg xl:prose-xl max-w-none text-dark font-afacad">
                    <h2
                      class="h1 font-dmSerifText text-dark !mb-4 !text-5xl"
                      set:html={item.title}
                    />
                    <div class="text-extra" set:html={item.content} />
                  </div>
                </div>
              </div>
            ))
          }
        </div>

        <!-- Right Column: Sticky Image Container -->
        <div class="image-column flex-1 relative">
          <div class="sticky top-24 w-full max-w-xl mx-auto h-[70vh]">
            <div class="relative w-full h-full">
              {
                items.map((item: Item, index: number) => (
                  <img
                    src={item.imageSrc}
                    alt={item.title || `Image ${index + 1}`}
                    width={1080}
                    height={1350}
                    loading="lazy"
                    class={`image-display absolute inset-0 w-full h-full object-cover rounded-md shadow-lg transition-opacity duration-500 ease-in-out ${index === 0 ? "opacity-100" : "opacity-0"}`}
                    data-index={index}
                  />
                ))
              }
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  // --- Start of new code for observer management ---
  let activeImageScrollObservers: Array<{
    componentRoot: HTMLElement;
    containerObs?: IntersectionObserver;
    imageSwitchObs?: IntersectionObserver;
    entryAnimObs?: IntersectionObserver;
    mobileEntryObs?: IntersectionObserver;
  }> = [];

  function cleanupAllImageScrollObservers() {
    activeImageScrollObservers.forEach((obsSet) => {
      if (obsSet.containerObs) obsSet.containerObs.disconnect();
      if (obsSet.imageSwitchObs) obsSet.imageSwitchObs.disconnect();
      if (obsSet.entryAnimObs) obsSet.entryAnimObs.disconnect();
      if (obsSet.mobileEntryObs) obsSet.mobileEntryObs.disconnect();
    });
    activeImageScrollObservers = [];
  }
  // --- End of new code for observer management ---

  function initImageWithTextScroll() {
    cleanupAllImageScrollObservers(); // Clean up all previous observers

    const componentRoots = document.querySelectorAll(".vr-image-text-scroll");

    componentRoots.forEach((componentRootNode) => {
      const componentRoot = componentRootNode as HTMLElement;
      const currentObserverSet: (typeof activeImageScrollObservers)[0] = {
        componentRoot,
      };
      activeImageScrollObservers.push(currentObserverSet);

      // Query for the new desktop wrapper if it exists
      const desktopStickyWrapper = componentRoot.querySelector(
        ".desktop-sticky-wrapper"
      ) as HTMLElement | null;

      const textItems = componentRoot.querySelectorAll(
        ".text-item"
      ) as NodeListOf<HTMLElement>;
      const imageDisplays = componentRoot.querySelectorAll(
        ".image-display"
      ) as NodeListOf<HTMLImageElement>;

      if (!textItems.length || !imageDisplays.length) {
        return; // Not enough elements to proceed
      }

      let currentImageIndex = 0;
      let isComponentActive = false;
      let imageSwitchObserver: IntersectionObserver | null = null;
      let entryAnimationObserver: IntersectionObserver | null = null;

      // Desktop-only logic
      if (
        window.innerWidth >= 1024 &&
        desktopStickyWrapper &&
        textItems.length > 0
      ) {
        // Container-level observer to detect when the component is in view (for performance)
        const containerObserver = new IntersectionObserver(
          (entries) => {
            entries.forEach((entry) => {
              const isIntersecting = entry.isIntersecting;
              const intersectionRatio = entry.intersectionRatio;
              const shouldBeActive =
                isIntersecting && intersectionRatio >= 0.05; // Activate if 5% visible (more sensitive)

              if (shouldBeActive && !isComponentActive) {
                isComponentActive = true;
                console.log("Component activated (Sticky Mode)");
                startImageSwitching();
                startEntryAnimations();
              } else if (!shouldBeActive && isComponentActive) {
                isComponentActive = false;
                console.log("Component deactivated (Sticky Mode)");
                stopImageSwitching();
                stopEntryAnimations();
                // Reset images to first one
                if (imageDisplays.length > 0) {
                  imageDisplays.forEach((img, idx) => {
                    img.classList.toggle("opacity-100", idx === 0);
                    img.classList.toggle("opacity-0", idx !== 0);
                  });
                  currentImageIndex = 0;
                }
              }
            });
          },
          {
            threshold: [0, 0.05, 0.1, 0.25, 0.5, 0.75, 1.0], // More granular thresholds
            rootMargin: "50px 0px 50px 0px", // More generous margins to detect earlier
          }
        );
        currentObserverSet.containerObs = containerObserver;
        containerObserver.observe(desktopStickyWrapper);

        // Improved initial check for visibility
        const checkInitialVisibility = () => {
          if (!isComponentActive && desktopStickyWrapper) {
            const rect = desktopStickyWrapper.getBoundingClientRect();
            const viewportHeight = window.innerHeight;

            // Check if any part of the component is visible
            if (rect.bottom > 0 && rect.top < viewportHeight) {
              const visibleRatio =
                Math.max(
                  0,
                  Math.min(rect.bottom, viewportHeight) - Math.max(rect.top, 0)
                ) / rect.height;

              if (visibleRatio > 0.05) {
                // More sensitive threshold
                isComponentActive = true;
                console.log("Component force-activated on load (Sticky Mode)");
                startImageSwitching();
                startEntryAnimations();
              }
            }
          }
        };

        // Check immediately and after a short delay
        checkInitialVisibility();
        setTimeout(checkInitialVisibility, 100);
        setTimeout(checkInitialVisibility, 500); // Additional check after page settles

        function startImageSwitching() {
          if (imageSwitchObserver || !isComponentActive) return;

          imageSwitchObserver = new IntersectionObserver(
            (entries: IntersectionObserverEntry[]) => {
              if (!isComponentActive) return;

              let mostVisibleEntry: IntersectionObserverEntry | null = null;
              let maxIntersectionRatio = -1;

              entries.forEach((entry: IntersectionObserverEntry) => {
                if (
                  entry.isIntersecting &&
                  entry.intersectionRatio > maxIntersectionRatio
                ) {
                  maxIntersectionRatio = entry.intersectionRatio;
                  mostVisibleEntry = entry;
                }
              });

              if (mostVisibleEntry !== null) {
                const currentEntry: IntersectionObserverEntry =
                  mostVisibleEntry;
                const targetElement = currentEntry.target as HTMLElement;
                const index = parseInt(
                  targetElement.getAttribute("data-index") || "0",
                  10
                );

                if (index !== currentImageIndex && imageDisplays[index]) {
                  if (imageDisplays[currentImageIndex]) {
                    imageDisplays[currentImageIndex].classList.remove(
                      "opacity-100"
                    );
                    imageDisplays[currentImageIndex].classList.add("opacity-0");
                  }
                  imageDisplays[index].classList.remove("opacity-0");
                  imageDisplays[index].classList.add("opacity-100");
                  currentImageIndex = index;
                  console.log("Switched to image (Sticky Mode)", index);
                }
              }
            },
            {
              root: null, // Observe against viewport
              rootMargin: "-20% 0px -20% 0px", // Target middle 60% of viewport for better triggering
              threshold: [0.1, 0.3, 0.5, 0.7, 1.0], // Multiple thresholds for better detection
            }
          );
          currentObserverSet.imageSwitchObs = imageSwitchObserver;
          textItems.forEach((item) => imageSwitchObserver!.observe(item));
        }

        function stopImageSwitching() {
          if (imageSwitchObserver) {
            imageSwitchObserver.disconnect();
            imageSwitchObserver = null;
          }
        }

        function startEntryAnimations() {
          if (entryAnimationObserver || !isComponentActive) return;

          entryAnimationObserver = new IntersectionObserver(
            (entries) => {
              entries.forEach((entry) => {
                if (entry.isIntersecting) {
                  const targetElement = entry.target as HTMLElement;
                  targetElement.classList.remove(
                    "lg:opacity-0",
                    "lg:translate-y-6"
                  );
                  targetElement.classList.add("opacity-100", "translate-y-0");
                }
              });
            },
            {
              root: null,
              rootMargin: "0px 0px -20% 0px", // Trigger when item is 20% from bottom of viewport
              threshold: 0.2,
            }
          );
          currentObserverSet.entryAnimObs = entryAnimationObserver;
          textItems.forEach((item) => {
            if (item.classList.contains("lg:opacity-0")) {
              entryAnimationObserver!.observe(item);
            }
          });
        }

        function stopEntryAnimations() {
          if (entryAnimationObserver) {
            entryAnimationObserver.disconnect();
            entryAnimationObserver = null;
          }
        }
      } else {
        // Mobile: just handle entry animations with viewport-based observer
        const mobileTextItems = componentRoot.querySelectorAll(
          ".text-item"
        ) as NodeListOf<HTMLElement>;
        if (mobileTextItems.length === 0) return;

        const mobileEntryObserver = new IntersectionObserver(
          (entries) => {
            entries.forEach((entry) => {
              if (entry.isIntersecting) {
                const targetElement = entry.target as HTMLElement;
                targetElement.classList.add("opacity-100", "translate-y-0");
              }
            });
          },
          {
            threshold: 0.1,
            rootMargin: "0px 0px -10% 0px",
          }
        );
        currentObserverSet.mobileEntryObs = mobileEntryObserver;
        textItems.forEach((item) => mobileEntryObserver.observe(item));
      }
    });
  }

  // Initialize on page load
  document.addEventListener("astro:page-load", initImageWithTextScroll);

  // Also initialize immediately in case the event already fired
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initImageWithTextScroll);
  } else {
    initImageWithTextScroll();
  }

  // Re-initialize on window resize to handle viewport changes
  window.addEventListener("resize", () => {
    // Debounce resize events
    clearTimeout((window as any).resizeTimeout);
    (window as any).resizeTimeout = setTimeout(initImageWithTextScroll, 150);
  });
</script>

<style>
  /* Ensure the desktop container structure supports sticky positioning */
  .desktop-sticky-wrapper {
    /* Container for the flex layout */
    position: relative;
  }

  /* Ensure text items have proper spacing for sticky behavior */
  .text-item {
    opacity: 1;
    min-height: 100vh; /* Full viewport height for each section */
  }

  /* Ensure the flex columns work properly */
  .text-column {
    flex: 1;
  }

  .image-column {
    flex: 1;
    position: relative;
  }

  @media (min-width: 1024px) {
    .text-item.intersect-once {
      opacity: 0;
      transform: translateY(1.5rem);
    }

    .text-item.intersect-once.opacity-100 {
      opacity: 1;
      transform: translateY(0);
    }

    /* Ensure smooth transitions for image switching */
    .image-display {
      transition: opacity 0.2s ease-in-out;
    }

    /* Ensure the sticky element works properly */
    .image-column .sticky {
      position: sticky;
      top: 6rem; /* 24 * 0.25rem */
      height: 70vh;
      z-index: 10;
    }
  }

  /* Ensure images fill their container properly */
  .image-display {
    object-fit: cover;
    border-radius: 0.375rem; /* rounded-md */
  }
</style>
