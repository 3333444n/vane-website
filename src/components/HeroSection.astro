---
import type { ImageMetadata } from "astro";
import { getImage } from "astro:assets";
import { register } from "swiper/element/bundle";

import "swiper/css";
import "swiper/css/lazy";
import "swiper/css/navigation";
import "swiper/css/pagination";

register();

// Define the interface for a single slide (data coming from index.astro)
export interface SlideData {
  imageUrl: ImageMetadata | string;
  secondaryText?: string;
  mainText: string;
  tertiaryText?: string;
  dateText?: string;
  buttonText?: string;
  buttonLink?: string;
}

// Define the interface for the component's props
export interface Props {
  slides: SlideData[];
  auxiliaryLinkText?: string;
  auxiliaryLink?: string;
  useStoneBackground?: boolean;
}

const {
  slides,
  auxiliaryLinkText,
  auxiliaryLink,
  useStoneBackground = true,
} = Astro.props as Props;
---

<section
  class:list={[
    "relative min-h-[80vh] h-[80vh] w-full flex flex-col justify-center items-center p-4 md:p-16",
    useStoneBackground ? "bg-light" : "bg-light2",
  ]}
>
  <swiper-container
    class="swiper-container relative w-full h-full max-h-full shadow-lg rounded-lg overflow-hidden flex justify-center items-center"
    navigation="true"
    pagination="true"
    loop="true"
    lazy="true"
    autoplay-delay="5000"
    autoplay-disable-on-interaction="false"
  >
    {
      await Promise.all(
        slides.map(async (slide, index) => {
          const imageSrc =
            typeof slide.imageUrl === "string"
              ? slide.imageUrl
              : (
                  await getImage({
                    src: slide.imageUrl,
                    width: 1600,
                    height: 900,
                  })
                ).src;

          return (
            <swiper-slide>
              <div class="relative w-full h-full min-h-[60vh]">
                <img
                  src={index === 0 ? imageSrc : undefined}
                  data-src={index > 0 ? imageSrc : undefined}
                  alt={slide.mainText}
                  width="1600"
                  height="900"
                  loading={index === 0 ? "eager" : "lazy"}
                  class="swiper-lazy absolute inset-0 w-full h-full object-cover"
                />
                <div class="swiper-lazy-preloader swiper-lazy-preloader-white" />
                <div class="absolute inset-0 bg-black/50" aria-hidden="true" />
                <div class="relative z-10 flex flex-col items-center justify-center text-center text-white h-full px-4 py-8">
                  {slide.secondaryText && (
                    <p class="text-sm sm:text-base mb-2">
                      {slide.secondaryText}
                    </p>
                  )}
                  {slide.mainText && (
                    <h1 class="text-4xl sm:text-5xl font-bold font-dmSerifText italic mb-4">
                      {slide.mainText}
                    </h1>
                  )}
                  {slide.tertiaryText && (
                    <p class="text-lg sm:text-xl italic mb-3">
                      {slide.tertiaryText}
                    </p>
                  )}
                  {slide.dateText && (
                    <p class="text-md sm:text-lg mb-8">{slide.dateText}</p>
                  )}
                  {slide.buttonText && slide.buttonLink && (
                    <a
                      href={slide.buttonLink}
                      class="btn-primary bg-[#C06C84] hover:bg-[#b15f76]"
                    >
                      {slide.buttonText}
                    </a>
                  )}
                </div>
              </div>
            </swiper-slide>
          );
        })
      )
    }
    <div class="swiper-button-prev" slot="button-prev"></div>
    <div class="swiper-button-next" slot="button-next"></div>
    <div class="swiper-pagination" slot="pagination"></div>
  </swiper-container>

  {
    auxiliaryLinkText && auxiliaryLink && (
      <div class="mt-4 w-full flex justify-center md:justify-end">
        <a
          href={auxiliaryLink}
          class="text-xs sm:text-sm font-medium text-stone-700 hover:text-stone-900 hover:underline transition duration-300 ease-in-out"
        >
          {auxiliaryLinkText}
        </a>
      </div>
    )
  }
</section>

<style is:global>
  /* 
    Styles for Swiper UI elements and ensuring HeroImage fills the slide.
    These are harder to do with Tailwind alone on external library elements.
  */

  /* Ensures proper height inheritance and centering for swiper elements */
  .swiper-container {
    display: flex !important;
    align-items: center !important;
    justify-content: center !important;
  }

  .swiper-wrapper {
    height: 100% !important;
    align-items: center !important;
  }

  /* Ensures HeroImage component takes appropriate space and centers content */
  .swiper-slide {
    height: 100% !important;
    display: flex !important;
    flex-direction: column !important;
    justify-content: center !important;
    align-items: center !important;
    min-height: 60vh; /* Fallback minimum height for very small screens */
  }

  /* Ensures HeroImage component fills the entire slide */
  .swiper-slide > div {
    width: 100% !important;
    height: 100% !important;
    min-height: 100% !important;
    display: flex !important;
    flex-direction: column !important;
    justify-content: center !important;
    align-items: center !important;
  }

  /* Responsive adjustments for better centering on smaller devices */
  @media (max-height: 600px) {
    .swiper-slide,
    .swiper-slide > div {
      min-height: 50vh !important;
    }
  }

  @media (max-height: 400px) {
    .swiper-slide,
    .swiper-slide > div {
      min-height: 40vh !important;
    }
  }

  /* Custom Swiper navigation button styles */
  .swiper-button-prev,
  .swiper-button-next {
    --swiper-navigation-color: #ffffff;
    --swiper-navigation-size: 22px;
    background-color: transparent;
    border-radius: 50%;
    width: 44px;
    height: 44px;
    transition: background-color 0.3s ease;
    top: 50% !important; /* Ensure buttons stay vertically centered */
    transform: translateY(-50%);
  }
  .swiper-button-next {
    /* Move a bit away from the right edge */
    right: 20px !important;
  }
  .swiper-button-prev {
    /* Move a bit away from the left edge */
    left: 20px !important;
  }
  .swiper-button-prev:hover,
  .swiper-button-next:hover {
    background-color: transparent;
  }

  /* Custom Swiper pagination bullet styles */
  .swiper-pagination-bullet {
    --swiper-pagination-bullet-inactive-color: rgba(255, 255, 255, 0.7);
    --swiper-pagination-bullet-inactive-opacity: 1;
    --swiper-pagination-bullet-size: 10px;
    --swiper-pagination-bullet-horizontal-gap: 6px;
    transition:
      background-color 0.3s ease,
      transform 0.3s ease;
  }
  .swiper-pagination-bullet-active {
    --swiper-pagination-color: #c06c84;
    transform: scale(1.2);
  }

  /* Ensure pagination stays at bottom regardless of content height */
  .swiper-pagination {
    bottom: 20px !important;
  }
</style>
